1.1. Requirements¶

1 - Check the driver of Microcontroller is compatible on windows or not then install the right one. 
2 - general information about esp32 
 https://docs.micropython.org/en/latest/esp32/general.html 

1.2. Powering the board¶

1.3. Getting the firmware¶
Stable firmware builds
Daily firmware builds
Daily firmware builds with SPIRAM support
https://micropython.org/download#esp32

1.4. Deploying the firmware¶

- check if the python is installed and esptool installing at pc using pip command 
     
   pip install esptool then go to edit the system Environoment variables check the path in script file
3 - open Micropython website and follow the command to earse the flash and flashing the Firmware for esp32
  https://github.com/micropython/micropython/tree/master 

1.5. Serial prompt¶

Once you have the firmware on the device you can access the REPL (Python prompt) over UART0 (GPIO1=TX, GPIO3=RX), which might be connected to a USB-serial converter, depending on your board. The baudrate is 115200.

From here you can now follow the ESP8266 tutorial, because these two Espressif chips are very similar when it comes to using MicroPython on them. The ESP8266 tutorial is found at MicroPython tutorial for ESP8266 (but skip the Introduction section).



1.6. Troubleshooting installation problems¶
If you experience problems during flashing or with running firmware immediately after it, here are troubleshooting recommendations:

Be aware of and try to exclude hardware problems. There are 2 common problems: bad power source quality, and worn-out/defective FlashROM. Speaking of power source, not just raw amperage is important, but also low ripple and noise/EMI in general. The most reliable and convenient power source is a USB port.

The flashing instructions above use flashing speed of 460800 baud, which is good compromise between speed and stability. However, depending on your module/board, USB-UART converter, cables, host OS, etc., the above baud rate may be too high and lead to errors. Try a more common 115200 baud rate instead in such cases.

To catch incorrect flash content (e.g. from a defective sector on a chip), add --verify switch to the commands above.

If you still experience problems with flashing the firmware please refer to esptool.py project page, https://github.com/espressif/esptool for additional documentation and a bug tracker where you can report problems.

If you are able to flash the firmware but the --verify option returns errors even after multiple retries the you may have a defective FlashROM chip.

https://docs.micropython.org/en/latest/esp32/quickref.html#

